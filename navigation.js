// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω–æ–º
let currentScreen = 'login'; // 'login', 'main', 'analytics'
let analyticsInitialized = false;

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const CONFIG = {
    starCount: 100,
    validCredentials: {
        'admin': '120521',
    }
};

// –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
const DataStore = {
    getQuickLinks: () => JSON.parse(localStorage.getItem('gdtQuickLinks') || '[]'),
    setQuickLinks: (links) => localStorage.setItem('gdtQuickLinks', JSON.stringify(links))
};

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—ñ—Ä–æ–∫ –¥–ª—è —Ñ–æ–Ω—É
function createStars(containerId = 'stars') {
    const starsContainer = document.getElementById(containerId);
    if (!starsContainer) return;
    
    starsContainer.innerHTML = '';
    const numStars = CONFIG.starCount;

    for (let i = 0; i < numStars; i++) {
        const star = document.createElement('div');
        star.className = 'star';
        star.style.left = Math.random() * 100 + '%';
        star.style.top = Math.random() * 100 + '%';
        star.style.animationDelay = Math.random() * 2 + 's';
        starsContainer.appendChild(star);
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –ø–µ—Ä–µ—Ö–æ–¥—É –º—ñ–∂ –µ–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenName) {
    console.log(`–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –µ–∫—Ä–∞–Ω—É: ${screenName}`);
    
    // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –≤—Å—ñ –µ–∫—Ä–∞–Ω–∏
    const screens = ['loginContainer', 'mainContent', 'analyticsScreen'];
    screens.forEach(screen => {
        const element = document.getElementById(screen);
        if (element) {
            element.style.display = 'none';
        }
    });

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –µ–∫—Ä–∞–Ω
    const targetScreen = document.getElementById(screenName);
    if (targetScreen) {
        targetScreen.style.display = screenName === 'loginContainer' ? 'flex' : 'block';
        currentScreen = screenName.replace('Container', '').replace('Screen', '');
        
        // –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ –ø–æ—á–∞—Ç–∫—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        window.scrollTo(0, 0);
        
        console.log(`–ê–∫—Ç–∏–≤–Ω–∏–π –µ–∫—Ä–∞–Ω: ${currentScreen}`);
    } else {
        console.error(`–ï–∫—Ä–∞–Ω ${screenName} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    }
}

// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function login(username, password) {
    return CONFIG.validCredentials[username] === password;
}

function checkAuth() {
    const isLoggedIn = sessionStorage.getItem('gdtLoggedIn');
    if (isLoggedIn === 'true') {
        showMainContent();
    } else {
        showScreen('loginContainer');
    }
}

function showMainContent() {
    showScreen('mainContent');
    loadQuickLinks();
}

function logout() {
    console.log('–í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏');
    sessionStorage.removeItem('gdtLoggedIn');
    showScreen('loginContainer');
    document.getElementById('loginForm').reset();
    
    const errorMessage = document.getElementById('errorMessage');
    if (errorMessage) {
        errorMessage.style.display = 'none';
    }
    
    currentScreen = 'login';
    analyticsInitialized = false;
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ –µ–∫—Ä–∞–Ω –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
function showAnalytics() {
    console.log('–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...');
    showScreen('analyticsScreen');
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑—ñ—Ä–∫–∏ –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    createStars('analyticsStars');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É, —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞
    if (!analyticsInitialized) {
        setTimeout(() => {
            initializeAnalytics();
            analyticsInitialized = true;
        }, 100);
    } else {
        // –Ø–∫—â–æ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ
        if (window.analyticsApp) {
            window.analyticsApp.loadData();
        }
    }
}

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
function returnToMain() {
    console.log('–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É...');
    showScreen('mainContent');
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
function initializeAnalytics() {
    console.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π Chart.js
    if (typeof Chart === 'undefined') {
        console.error('Chart.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!');
        return;
    }

    try {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        if (typeof AnalyticsDataManager !== 'undefined') {
            window.analyticsDataManager = new AnalyticsDataManager();
            console.log('AnalyticsDataManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        }
        
        if (typeof AnalyticsChartsManager !== 'undefined') {
            window.analyticsChartsManager = new AnalyticsChartsManager();
            window.analyticsChartsManager.initializeCharts();
            window.analyticsChartsManager.setupResponsive();
            console.log('AnalyticsChartsManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        if (typeof AnalyticsApp !== 'undefined') {
            window.analyticsApp = new AnalyticsApp();
            window.analyticsApp.initialize();
            console.log('AnalyticsApp —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        }
        
        console.log('–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:', error);
    }
}

// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ –≤—Ö–æ–¥—É
function handleLogin(e) {
    e.preventDefault();
    
    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value;

    if (!username || !password) {
        showLoginError('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!');
        return;
    }

    if (login(username, password)) {
        sessionStorage.setItem('gdtLoggedIn', 'true');
        showMainContent();
        const errorMessage = document.getElementById('errorMessage');
        if (errorMessage) {
            errorMessage.style.display = 'none';
        }
    } else {
        showLoginError('–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å!');
    }
}

function showLoginError(message) {
    const errorMessage = document.getElementById('errorMessage');
    const loginBox = document.querySelector('.login-box');
    
    if (errorMessage) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
    }
    
    if (loginBox) {
        loginBox.style.animation = 'shake 0.5s ease-in-out';
        setTimeout(() => {
            loginBox.style.animation = 'slideIn 0.8s ease-out';
        }, 500);
    }
}

// –®–≤–∏–¥–∫—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
function loadQuickLinks() {
    const links = DataStore.getQuickLinks();
    const container = document.getElementById('quickLinksGrid');
    
    if (!container) return;
    
    if (links.length === 0) {
        container.innerHTML = `
            <div style="grid-column: 1 / -1; text-align: center; padding: 20px; color: #888;">
                <p>–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = links.map(link => `
        <a href="${link.url}" target="_blank" class="quick-link">
            <span class="quick-link-icon">${link.icon}</span>
            <span class="quick-link-name">${link.name}</span>
            <button class="delete-btn" onclick="deleteQuickLink('${link.name}', event)">√ó</button>
        </a>
    `).join('');
}

function deleteQuickLink(name, event) {
    event.preventDefault();
    event.stopPropagation();
    
    if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è "${name}"?`)) {
        const links = DataStore.getQuickLinks().filter(link => link.name !== name);
        DataStore.setQuickLinks(links);
        loadQuickLinks();
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
function openLinksManager() {
    const modal = document.getElementById('linksModal');
    if (modal) {
        modal.style.display = 'block';
    }
}

function closeModal() {
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        modal.style.display = 'none';
    });
    
    // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ª—è —Ñ–æ—Ä–º–∏
    ['linkName', 'linkUrl', 'linkIcon'].forEach(id => {
        const element = document.getElementById(id);
        if (element) element.value = '';
    });
}

function saveLink() {
    const name = document.getElementById('linkName').value.trim();
    const url = document.getElementById('linkUrl').value.trim();
    const icon = document.getElementById('linkIcon').value.trim() || 'üîó';
    
    if (!name || !url) {
        alert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–∞ URL');
        return;
    }
    
    const links = DataStore.getQuickLinks();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –Ω–µ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    if (links.some(link => link.name === name)) {
        alert('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î');
        return;
    }
    
    links.push({ name, url, icon });
    DataStore.setQuickLinks(links);
    loadQuickLinks();
    closeModal();
    
    console.log('–î–æ–¥–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:', { name, url, icon });
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
function init() {
    console.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞...');
    
    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –∑—ñ—Ä–∫–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    createStars('stars');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é
    checkAuth();
    
    // –î–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ä–º–∏ –≤—Ö–æ–¥—É
    const loginForm = document.getElementById('loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', handleLogin);
    }

    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –ª–æ–≥—ñ–Ω—É
    const usernameField = document.getElementById('username');
    if (usernameField && currentScreen === 'login') {
        usernameField.focus();
    }

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º–∏
    window.addEventListener('click', function(event) {
        const modals = document.querySelectorAll('.modal');
        modals.forEach(modal => {
            if (event.target === modal) {
                closeModal();
            }
        });
    });

    // –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ—à—ñ Escape –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            closeModal();
        }
    });
    
    console.log('–î–æ–¥–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
}

// –ó–∞–ø—É—Å–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', init);

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–ª–∏–∫—ñ–≤ –∑ HTML
window.showAnalytics = showAnalytics;
window.returnToMain = returnToMain;
window.logout = logout;
window.deleteQuickLink = deleteQuickLink;
window.openLinksManager = openLinksManager;
window.closeModal = closeModal;
window.saveLink = saveLink;

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ (–±—É–¥—É—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏—Å—è –∫–æ–ª–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞)
window.openAddProjectModal = () => {
    if (window.analyticsApp && window.analyticsApp.openAddProjectModal) {
        window.analyticsApp.openAddProjectModal();
    } else {
        console.warn('Analytics app not initialized');
    }
};

window.closeProjectModal = () => {
    if (window.analyticsApp && window.analyticsApp.closeProjectModal) {
        window.analyticsApp.closeProjectModal();
    }
};

window.saveProject = () => {
    if (window.analyticsApp && window.analyticsApp.saveProject) {
        window.analyticsApp.saveProject();
    }
};

window.applyFilters = () => {
    if (window.analyticsApp && window.analyticsApp.applyFilters) {
        window.analyticsApp.applyFilters();
    }
};

window.resetFilters = () => {
    if (window.analyticsApp && window.analyticsApp.resetFilters) {
        window.analyticsApp.resetFilters();
    }
};

window.setView = (view) => {
    if (window.analyticsApp && window.analyticsApp.setView) {
        window.analyticsApp.setView(view);
    }
};

window.exportAnalytics = () => {
    if (window.analyticsApp && window.analyticsApp.exportAnalytics) {
        window.analyticsApp.exportAnalytics();
    }
};

window.closeDetailsModal = () => {
    if (window.analyticsApp && window.analyticsApp.closeDetailsModal) {
        window.analyticsApp.closeDetailsModal();
    }
};

console.log('Navigation script loaded successfully');