// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –µ–∫—Ä–∞–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
class AnalyticsApp {
    constructor() {
        this.currentView = 'grid';
        this.currentFilters = {};
        this.isInitialized = false;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞
    initialize() {
        if (this.isInitialized) return;
        
        console.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...');
        
        this.createStars();
        this.setupEventListeners();
        this.setupDateInputs();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        this.initializeManagers();
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
        this.loadData();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫–∏
        this.initializeCharts();
        
        this.isInitialized = true;
        console.log('–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
    initializeManagers() {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
        if (!window.analyticsDataManager) {
            console.log('–°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–∏—Ö...');
            window.analyticsDataManager = new AnalyticsDataManager();
        }
        
        if (!window.analyticsChartsManager) {
            console.log('–°—Ç–≤–æ—Ä—é—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...');
            window.analyticsChartsManager = new AnalyticsChartsManager();
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—ñ—Ä–æ–∫ –¥–ª—è —Ñ–æ–Ω—É
    createStars() {
        const starsContainer = document.getElementById('stars');
        if (!starsContainer) return;

        const numStars = 100;
        starsContainer.innerHTML = '';

        for (let i = 0; i < numStars; i++) {
            const star = document.createElement('div');
            star.className = 'star';
            star.style.left = Math.random() * 100 + '%';
            star.style.top = Math.random() * 100 + '%';
            star.style.animationDelay = Math.random() * 2 + 's';
            starsContainer.appendChild(star);
        }
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    setupEventListeners() {
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–∏—Ö –≤—ñ–∫–æ–Ω –ø–æ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º–∏
        window.addEventListener('click', (event) => {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    this.closeModal();
                }
            });
        });

        // –û–±—Ä–æ–±–∫–∞ Enter –≤ —Ñ–æ—Ä–º—ñ –ø—Ä–æ–µ–∫—Ç—É
        const projectModal = document.getElementById('projectModal');
        if (projectModal) {
            projectModal.addEventListener('keydown', (event) => {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    this.saveProject();
                }
            });
        }

        // –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
        const filterInputs = document.querySelectorAll('.filter-input');
        filterInputs.forEach(input => {
            input.addEventListener('change', () => {
                this.autoApplyFilters();
            });
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤ –¥–∞—Ç
    setupDateInputs() {
        const today = new Date().toISOString().split('T')[0];
        const projectCreatedDate = document.getElementById('projectCreatedDate');
        
        if (projectCreatedDate) {
            projectCreatedDate.value = today;
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    loadData() {
        console.log('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
        this.updateStatistics();
        this.loadProjects();
        this.updateCharts();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    initializeCharts() {
        if (window.analyticsChartsManager) {
            console.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...');
            window.analyticsChartsManager.initializeCharts();
            window.analyticsChartsManager.setupResponsive();
        }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatistics() {
        if (!window.analyticsDataManager) {
            console.warn('–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–∏—Ö –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
            return;
        }

        const projects = this.getFilteredProjects();
        const stats = window.analyticsDataManager.calculateStatistics(projects);

        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        this.updateStatElement('totalProjects', stats.totalProjects);
        this.updateStatElement('whitePassRate', `${stats.whitePassRate}%`);
        this.updateStatElement('grayPassRate', `${stats.grayPassRate}%`);
        this.updateStatElement('avgLifespan', stats.avgLifespan);
        this.updateStatElement('totalBans', stats.totalBans);
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    updateStatElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        } else {
            console.warn(`–ï–ª–µ–º–µ–Ω—Ç –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        }
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    updateCharts() {
        if (window.analyticsChartsManager && window.analyticsDataManager) {
            console.log('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...');
            const chartData = window.analyticsDataManager.getChartData();
            window.analyticsChartsManager.updateAllCharts(chartData);
        }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤
    loadProjects() {
        const projects = this.getFilteredProjects();
        const container = document.getElementById('projectsGrid');
        
        if (!container) {
            console.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–æ–µ–∫—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        console.log(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${projects.length} –ø—Ä–æ–µ–∫—Ç—ñ–≤`);

        if (projects.length === 0) {
            container.innerHTML = this.getEmptyStateHTML();
            return;
        }

        container.className = `projects-grid ${this.currentView === 'list' ? 'list-view' : ''}`;
        container.innerHTML = projects.map(project => this.createProjectHTML(project)).join('');
    }

    // HTML –¥–ª—è –ø—É—Å—Ç–æ–≥–æ —Å—Ç–∞–Ω—É
    getEmptyStateHTML() {
        return `
            <div style="grid-column: 1 / -1; text-align: center; padding: 60px; color: #888;">
                <div style="font-size: 3rem; margin-bottom: 20px;">üìã</div>
                <h3>–ù–µ–º–∞—î –ø—Ä–æ–µ–∫—Ç—ñ–≤ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è</h3>
                <p>–î–æ–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç–∏ –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏</p>
            </div>
        `;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –ø—Ä–æ–µ–∫—Ç—É
    createProjectHTML(project) {
        if (!window.analyticsDataManager) return '';
        
        const lifespan = window.analyticsDataManager.calculateProjectLifespan(project);
        const createdDate = new Date(project.createdAt).toLocaleDateString('uk-UA');
        
        return `
            <div class="project-card">
                <div class="project-header">
                    <div>
                        <div class="project-title">${project.name}</div>
                        <div class="project-meta">
                            –°—Ç–≤–æ—Ä–µ–Ω–æ: ${createdDate} | –ñ–∏—Ç—Ç—è: ${lifespan} –¥–Ω—ñ–≤
                        </div>
                    </div>
                    <div class="project-actions">
                        <button class="action-btn info" onclick="analyticsApp.showProjectDetails('${project.id}')" title="–î–µ—Ç–∞–ª—ñ">üìä</button>
                        <button class="action-btn" onclick="analyticsApp.editProject('${project.id}')" title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏">‚úèÔ∏è</button>
                        <button class="action-btn danger" onclick="analyticsApp.deleteProject('${project.id}')" title="–í–∏–¥–∞–ª–∏—Ç–∏">üóëÔ∏è</button>
                    </div>
                </div>
                ${project.description ? `<p style="color: #ccc; margin-bottom: 15px; font-size: 0.9rem;">${project.description}</p>` : ''}
                ${project.url ? `<a href="${project.url}" target="_blank" style="color: #00d4ff; font-size: 0.8rem; text-decoration: none;">üîó ${project.url}</a>` : ''}
                <div class="project-statuses">
                    ${this.createStatusHTML(project, 'whitePassed')}
                    ${this.createStatusHTML(project, 'whiteBanned')}
                    ${this.createStatusHTML(project, 'grayPassed')}
                    ${this.createStatusHTML(project, 'grayBanned')}
                </div>
            </div>
        `;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
    createStatusHTML(project, statusType) {
        const status = project.statuses[statusType];
        const isActive = status.enabled ? 'active' : '';
        const icons = {
            whitePassed: '‚ö™‚úÖ',
            whiteBanned: '‚ö™‚ùå',
            grayPassed: '‚ö´‚úÖ',
            grayBanned: '‚ö´‚ùå'
        };
        const labels = {
            whitePassed: '–ë—ñ–ª–∞ ‚úì',
            whiteBanned: '–ë—ñ–ª–∞ ‚úó',
            grayPassed: '–°—ñ—Ä–∞ ‚úì',
            grayBanned: '–°—ñ—Ä–∞ ‚úó'
        };
        
        return `
            <div class="status-item ${isActive}">
                <div class="status-info">
                    <input type="checkbox" class="status-checkbox" 
                           ${status.enabled ? 'checked' : ''} 
                           onchange="analyticsApp.handleStatusChange('${project.id}', '${statusType}', this)">
                    <span class="status-label">${icons[statusType]} ${labels[statusType]}</span>
                </div>
                <div class="status-controls">
                    ${status.enabled ? `
                        <input type="date" class="date-input" 
                               value="${status.date || ''}" 
                               onchange="analyticsApp.handleDateChange('${project.id}', '${statusType}', this)">
                    ` : `
                        <span class="status-date">‚Äî</span>
                    `}
                </div>
            </div>
        `;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç—ñ–≤
    getFilteredProjects() {
        if (!window.analyticsDataManager) return [];
        return window.analyticsDataManager.filterProjects(this.currentFilters);
    }

    // –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
    openAddProjectModal() {
        const modal = document.getElementById('projectModal');
        const title = document.getElementById('modalTitle');
        
        if (title) title.textContent = '‚ûï –ù–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç';
        
        // –û—á–∏—â–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
        this.clearProjectForm();
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
        const dateInput = document.getElementById('projectCreatedDate');
        if (dateInput) {
            dateInput.value = new Date().toISOString().split('T')[0];
        }
        
        if (modal) modal.style.display = 'block';
    }

    closeProjectModal() {
        const modal = document.getElementById('projectModal');
        if (modal) modal.style.display = 'none';
        this.clearProjectForm();
    }

    closeModal() {
        this.closeProjectModal();
        this.closeDetailsModal();
    }

    clearProjectForm() {
        const inputs = ['projectName', 'projectDescription', 'projectUrl', 'projectCreatedDate'];
        inputs.forEach(id => {
            const element = document.getElementById(id);
            if (element) element.value = '';
        });
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    saveProject() {
        const name = document.getElementById('projectName')?.value.trim();
        const description = document.getElementById('projectDescription')?.value.trim();
        const url = document.getElementById('projectUrl')?.value.trim();
        const createdDate = document.getElementById('projectCreatedDate')?.value;
        
        if (!name) {
            alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–æ–µ–∫—Ç—É');
            return;
        }
        
        if (!createdDate) {
            alert('–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
            return;
        }
        
        const projectData = {
            name,
            description,
            url,
            createdAt: new Date(createdDate).toISOString()
        };
        
        if (window.analyticsDataManager) {
            window.analyticsDataManager.addProject(projectData);
            this.loadData();
            this.closeProjectModal();
            console.log('–ü—Ä–æ–µ–∫—Ç –¥–æ–¥–∞–Ω–æ:', projectData);
        }
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    deleteProject(projectId) {
        if (!window.analyticsDataManager) return;
        
        const project = window.analyticsDataManager.getProjects().find(p => p.id === projectId);
        if (!project) return;
        
        if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç "${project.name}"?`)) {
            window.analyticsDataManager.deleteProject(projectId);
            this.loadData();
            console.log('–ü—Ä–æ–µ–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ:', projectId);
        }
    }

    // –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É
    editProject(projectId) {
        alert('–§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—É–¥–µ –¥–æ–¥–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó');
    }

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
    handleStatusChange(projectId, statusType, checkbox) {
        if (!window.analyticsDataManager) return;
        
        const enabled = checkbox.checked;
        const date = enabled ? new Date().toISOString().split('T')[0] : null;
        
        window.analyticsDataManager.updateProjectStatus(projectId, statusType, enabled, date);
        this.loadData();
        console.log('–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ:', { projectId, statusType, enabled });
    }

    // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –¥–∞—Ç–∏
    handleDateChange(projectId, statusType, input) {
        if (!window.analyticsDataManager) return;
        
        const projects = window.analyticsDataManager.getProjects();
        const project = projects.find(p => p.id === projectId);
        
        if (project && project.statuses[statusType].enabled) {
            project.statuses[statusType].date = input.value;
            window.analyticsDataManager.saveProjects(projects);
            this.updateStatistics();
            this.updateCharts();
            console.log('–î–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ:', { projectId, statusType, date: input.value });
        }
    }

    // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç—É
    showProjectDetails(projectId) {
        if (!window.analyticsDataManager) return;
        
        const project = window.analyticsDataManager.getProjects().find(p => p.id === projectId);
        if (!project) return;

        const modal = document.getElementById('projectDetailsModal');
        const title = document.getElementById('detailsTitle');
        const content = document.getElementById('projectDetailsContent');
        
        if (title) title.textContent = `üìä ${project.name}`;
        if (content) content.innerHTML = this.createProjectDetailsHTML(project);
        if (modal) modal.style.display = 'block';
    }

    closeDetailsModal() {
        const modal = document.getElementById('projectDetailsModal');
        if (modal) modal.style.display = 'none';
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è HTML –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç—É
    createProjectDetailsHTML(project) {
        if (!window.analyticsDataManager) return '';
        
        const lifespan = window.analyticsDataManager.calculateProjectLifespan(project);
        const createdDate = new Date(project.createdAt).toLocaleDateString('uk-UA');
        
        const timeline = [];
        Object.entries(project.statuses).forEach(([key, status]) => {
            if (status.enabled && status.date) {
                const labels = {
                    whitePassed: '–ü—Ä–æ–π—à–ª–∞ –±—ñ–ª–∞ —á–∞—Å—Ç–∏–Ω–∞',
                    whiteBanned: '–ë–∞–Ω –±—ñ–ª–æ—ó —á–∞—Å—Ç–∏–Ω–∏',
                    grayPassed: '–ü—Ä–æ–π—à–ª–∞ —Å—ñ—Ä–∞ —á–∞—Å—Ç–∏–Ω–∞',
                    grayBanned: '–ë–∞–Ω —Å—ñ—Ä–æ—ó —á–∞—Å—Ç–∏–Ω–∏'
                };
                timeline.push({
                    event: labels[key],
                    date: new Date(status.date).toLocaleDateString('uk-UA'),
                    type: key
                });
            }
        });
        
        timeline.sort((a, b) => new Date(a.date) - new Date(b.date));
        
        return `
            <div class="project-details">
                <div class="details-section">
                    <h4>üìã –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h4>
                    <p><strong>–ù–∞–∑–≤–∞:</strong> ${project.name}</p>
                    <p><strong>–°—Ç–≤–æ—Ä–µ–Ω–æ:</strong> ${createdDate}</p>
                    <p><strong>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∂–∏—Ç—Ç—è:</strong> ${lifespan} –¥–Ω—ñ–≤</p>
                    ${project.description ? `<p><strong>–û–ø–∏—Å:</strong> ${project.description}</p>` : ''}
                    ${project.url ? `<p><strong>URL:</strong> <a href="${project.url}" target="_blank">${project.url}</a></p>` : ''}
                </div>
                
                <div class="details-section">
                    <h4>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                    <p><strong>–ë—ñ–ª–∞ —á–∞—Å—Ç–∏–Ω–∞:</strong> ${project.statuses.whitePassed.enabled ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}</p>
                    <p><strong>–°—ñ—Ä–∞ —á–∞—Å—Ç–∏–Ω–∞:</strong> ${project.statuses.grayPassed.enabled ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω–∞'}</p>
                    <p><strong>–°—Ç–∞–Ω:</strong> ${this.getProjectStatus(project)}</p>
                </div>
            </div>
            
            ${timeline.length > 0 ? `
                <div class="details-section" style="grid-column: 1 / -1; margin-top: 20px;">
                    <h4>‚è∞ –ß–∞—Å–æ–≤–∞ –ª—ñ–Ω—ñ—è</h4>
                    ${timeline.map(item => `
                        <div class="timeline-item">
                            <span>${item.event}</span>
                            <span>${item.date}</span>
                        </div>
                    `).join('')}
                </div>
            ` : ''}
        `;
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—Ä–æ–µ–∫—Ç—É
    getProjectStatus(project) {
        if (project.statuses.whiteBanned.enabled || project.statuses.grayBanned.enabled) {
            return 'üö´ –ó–∞–±–∞–Ω–µ–Ω–∏–π';
        }
        if (project.statuses.grayPassed.enabled) {
            return 'üéâ –ü–æ–≤–Ω—ñ—Å—Ç—é –ø—Ä–æ–π–¥–µ–Ω–∏–π';
        }
        if (project.statuses.whitePassed.enabled) {
            return 'üü° –ß–∞—Å—Ç–∫–æ–≤–æ –ø—Ä–æ–π–¥–µ–Ω–∏–π';
        }
        return 'üîÑ –ê–∫—Ç–∏–≤–Ω–∏–π';
    }

    // –§—ñ–ª—å—Ç—Ä–∏
    applyFilters() {
        const dateFrom = document.getElementById('dateFrom')?.value;
        const dateTo = document.getElementById('dateTo')?.value;
        const status = document.getElementById('statusFilter')?.value;
        
        this.currentFilters = {
            dateFrom: dateFrom || null,
            dateTo: dateTo || null,
            status: status || 'all'
        };
        
        console.log('–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —Ñ—ñ–ª—å—Ç—Ä–∏:', this.currentFilters);
        this.loadData();
    }

    autoApplyFilters() {
        setTimeout(() => this.applyFilters(), 300);
    }

    resetFilters() {
        const dateFromEl = document.getElementById('dateFrom');
        const dateToEl = document.getElementById('dateTo');
        const statusEl = document.getElementById('statusFilter');
        
        if (dateFromEl) dateFromEl.value = '';
        if (dateToEl) dateToEl.value = '';
        if (statusEl) statusEl.value = 'all';
        
        this.currentFilters = {};
        this.loadData();
        console.log('–§—ñ–ª—å—Ç—Ä–∏ —Å–∫–∏–Ω—É—Ç–æ');
    }

    // –ó–º—ñ–Ω–∞ –≤–∏–¥—É
    setView(view) {
        this.currentView = view;
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.toggle-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        const activeBtn = document.querySelector(`[data-view="${view}"]`);
        if (activeBtn) activeBtn.classList.add('active');
        
        this.loadProjects();
        console.log('–ó–º—ñ–Ω–µ–Ω–æ –≤–∏–¥ –Ω–∞:', view);
    }

    // –ï–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    exportAnalytics() {
        if (window.analyticsDataManager) {
            window.analyticsDataManager.exportData();
            console.log('–î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
        }
    }

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    returnToMain() {
        if (window.analyticsChartsManager) {
            window.analyticsChartsManager.destroyCharts();
        }
        
        // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        window.location.href = 'index.html';
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–ª–∏–∫—ñ–≤ –∑ HTML
window.openAddProjectModal = () => {
    if (window.analyticsApp) window.analyticsApp.openAddProjectModal();
};

window.closeProjectModal = () => {
    if (window.analyticsApp) window.analyticsApp.closeProjectModal();
};

window.closeModal = () => {
    if (window.analyticsApp) window.analyticsApp.closeModal();
};

window.saveProject = () => {
    if (window.analyticsApp) window.analyticsApp.saveProject();
};

window.applyFilters = () => {
    if (window.analyticsApp) window.analyticsApp.applyFilters();
};

window.resetFilters = () => {
    if (window.analyticsApp) window.analyticsApp.resetFilters();
};

window.setView = (view) => {
    if (window.analyticsApp) window.analyticsApp.setView(view);
};

window.exportAnalytics = () => {
    if (window.analyticsApp) window.analyticsApp.exportAnalytics();
};

window.returnToMain = () => {
    if (window.analyticsApp) window.analyticsApp.returnToMain();
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞
const analyticsApp = new AnalyticsApp();

// –ó–∞–ø—É—Å–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É...');
    
    // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Chart.js
    if (typeof Chart !== 'undefined') {
        analyticsApp.initialize();
    } else {
        console.log('–ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Chart.js...');
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 100–º—Å
        const checkChart = setInterval(() => {
            if (typeof Chart !== 'undefined') {
                clearInterval(checkChart);
                analyticsApp.initialize();
            }
        }, 100);
        
        // –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            clearInterval(checkChart);
            console.error('Chart.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è –≤—á–∞—Å–Ω–æ');
            analyticsApp.initialize(); // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–µ–∑ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
        }, 5000);
    }
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.analyticsApp = analyticsApp;