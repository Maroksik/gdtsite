// –û—Å–Ω–æ–≤–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫
class App {
    constructor() {
        this.isInitialized = false;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫–∞
    init() {
        if (this.isInitialized) return;
        
        console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è GDT Analytics...');
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑—ñ—Ä–æ–∫
        window.uiManager.createStars();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
        initAuth();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
        window.uiManager.initEventListeners();
        
        this.isInitialized = true;
        console.log('‚úÖ GDT Analytics —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø HTML ===

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
function loadData() {
    if (window.uiManager) {
        window.uiManager.loadData();
    }
}

// –ü—Ä–æ–µ–∫—Ç–∏
function openProjectModal(projectId = null) {
    if (window.uiManager) {
        window.uiManager.openProjectModal(projectId);
    }
}

function saveProject() {
    const name = document.getElementById('projectName')?.value.trim();
    const client = document.getElementById('projectClient')?.value;
    const base = document.getElementById('projectBase')?.value;
    const createdDate = document.getElementById('projectCreatedDate')?.value;
    
    if (!name || !client || !base || !createdDate) {
        alert('–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: –Ω–∞–∑–≤–∞, –∑–∞–º–æ–≤–Ω–∏–∫, –±–∞–∑–∞ –¥—ñ–∂–æ–∫, –¥–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è');
        return;
    }
    
    const projectData = {
        name,
        client,
        base,
        createdAt: new Date(createdDate).toISOString(),
        url: document.getElementById('projectUrl')?.value.trim() || '',
        description: document.getElementById('projectDescription')?.value.trim() || '',
        
        // –ë—ñ–ª–∞ —á–∞—Å—Ç–∏–Ω–∞
        whitePassed: document.getElementById('whitePassedCheck')?.checked || false,
        whitePassedDate: document.getElementById('whitePassedDate')?.value || null,
        whiteSpamDown: document.getElementById('whiteSpamDownCheck')?.checked || false,
        whiteSpamDownDate: document.getElementById('whiteSpamDownDate')?.value || null,
        whiteBanned: document.getElementById('whiteBannedCheck')?.checked || false,
        whiteBannedDate: document.getElementById('whiteBannedDate')?.value || null,
        
        // –°—ñ—Ä–∞ —á–∞—Å—Ç–∏–Ω–∞
        grayPassed: document.getElementById('grayPassedCheck')?.checked || false,
        grayPassedDate: document.getElementById('grayPassedDate')?.value || null,
        grayReviewBanned: document.getElementById('grayReviewBannedCheck')?.checked || false,
        grayReviewBannedDate: document.getElementById('grayReviewBannedDate')?.value || null,
        grayBanned: document.getElementById('grayBannedCheck')?.checked || false,
        grayBannedDate: document.getElementById('grayBannedDate')?.value || null
    };
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ª–æ–≥—ñ–∫–∏
    if (projectData.whiteSpamDown && projectData.whitePassed) {
        alert('–ü—Ä–æ–µ–∫—Ç –Ω–µ –º–æ–∂–µ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ñ–ª—É —á–∞—Å—Ç–∏–Ω—É —ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∞–º –Ω–∏–∑');
        return;
    }
    
    if (projectData.grayPassed && !projectData.whitePassed) {
        alert('–°—ñ—Ä–∞ —á–∞—Å—Ç–∏–Ω–∞ –º–æ–∂–µ –ø—Ä–æ–π—Ç–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø—Ä–æ–π—à–ª–∞ –±—ñ–ª–∞ —á–∞—Å—Ç–∏–Ω–∞');
        return;
    }
    
    try {
        if (window.dataManager.currentEditId) {
            window.dataManager.updateProject(window.dataManager.currentEditId, projectData);
            console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ:', window.dataManager.currentEditId);
        } else {
            window.dataManager.addProject(projectData);
            console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ–¥–∞–Ω–æ:', projectData.name);
        }
        
        loadData();
        closeModal();
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É');
    }
}

function editProject(projectId) {
    openProjectModal(projectId);
}

function deleteProject(projectId) {
    const project = window.dataManager.getProjects().find(p => p.id === projectId);
    if (!project) return;
    
    if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–µ–∫—Ç "${project.name}"?`)) {
        try {
            window.dataManager.deleteProject(projectId);
            loadData();
            console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ:', project.name);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—É');
        }
    }
}

// –ó–∞–º–æ–≤–Ω–∏–∫–∏
function openClientsModal() {
    if (window.uiManager) {
        window.uiManager.openClientsModal();
    }
}

function addClient() {
    const name = document.getElementById('newClientName')?.value.trim();
    if (!name) {
        alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∑–∞–º–æ–≤–Ω–∏–∫–∞');
        return;
    }
    
    try {
        if (window.dataManager.addClient(name)) {
            document.getElementById('newClientName').value = '';
            window.uiManager.loadClientsList();
            window.uiManager.loadSelectOptions();
            console.log('‚úÖ –ó–∞–º–æ–≤–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ:', name);
        } else {
            alert('–ó–∞–º–æ–≤–Ω–∏–∫ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–∞:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–∞');
    }
}

function deleteClient(name) {
    if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–Ω–∏–∫–∞ "${name}"?`)) {
        try {
            window.dataManager.deleteClient(name);
            window.uiManager.loadClientsList();
            window.uiManager.loadSelectOptions();
            console.log('‚úÖ –ó–∞–º–æ–≤–Ω–∏–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–æ:', name);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–∞:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–Ω–∏–∫–∞');
        }
    }
}

// –ë–∞–∑–∏ –¥—ñ–∂–æ–∫
function openBasesModal() {
    if (window.uiManager) {
        window.uiManager.openBasesModal();
    }
}

function addBase() {
    const name = document.getElementById('newBaseName')?.value.trim();
    if (!name) {
        alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –±–∞–∑–∏ –¥—ñ–∂–æ–∫');
        return;
    }
    
    try {
        if (window.dataManager.addBase(name)) {
            document.getElementById('newBaseName').value = '';
            window.uiManager.loadBasesList();
            window.uiManager.loadSelectOptions();
            console.log('‚úÖ –ë–∞–∑—É –¥–æ–¥–∞–Ω–æ:', name);
        } else {
            alert('–ë–∞–∑–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–∏:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –±–∞–∑–∏');
    }
}

function deleteBase(name) {
    if (confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ –±–∞–∑—É "${name}"?`)) {
        try {
            window.dataManager.deleteBase(name);
            window.uiManager.loadBasesList();
            window.uiManager.loadSelectOptions();
            console.log('‚úÖ –ë–∞–∑—É –≤–∏–¥–∞–ª–µ–Ω–æ:', name);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–∑–∏:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–∞–∑–∏');
        }
    }
}

// –ú–æ–¥–∞–ª—å–Ω—ñ –≤—ñ–∫–Ω–∞
function closeModal() {
    if (window.uiManager) {
        window.uiManager.closeModal();
    }
}

// –§—ñ–ª—å—Ç—Ä–∏
function applyFilters() {
    if (window.uiManager) {
        window.uiManager.applyFilters();
    }
}

function resetFilters() {
    if (window.uiManager) {
        window.uiManager.resetFilters();
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç
function exportData() {
    try {
        window.dataManager.exportData();
        console.log('‚úÖ –î–∞–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–∏—Ö');
    }
}

// === –î–ï–ú–û –î–ê–ù–Ü ===
function createSampleData() {
    if (confirm('–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ? (–¶–µ –¥–æ–¥–∞—Å—Ç—å –ø—Ä–∏–∫–ª–∞–¥–∏ –ø—Ä–æ–µ–∫—Ç—ñ–≤)')) {
        try {
            window.dataManager.createSampleData();
            loadData();
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö');
        }
    }
}

// === –î–û–î–ê–¢–ö–û–í–Ü –£–¢–ò–õ–Ü–¢–ò ===
function clearAllData() {
    if (confirm('–£–í–ê–ì–ê! –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –¥–∞–Ω—ñ (–ø—Ä–æ–µ–∫—Ç–∏, –∑–∞–º–æ–≤–Ω–∏–∫–∏, –±–∞–∑–∏). –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏?')) {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!')) {
            try {
                localStorage.removeItem(window.dataManager.storageKey);
                localStorage.removeItem(window.dataManager.clientsKey);
                localStorage.removeItem(window.dataManager.basesKey);
                
                // –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
                window.dataManager.initDefaultData();
                loadData();
                
                console.log('‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
                alert('–í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
                alert('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
            }
        }
    }
}

// –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
function importData() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.json';
    
    input.onchange = function(event) {
        const file = event.target.files[0];
        if (!file) return;
        
        window.dataManager.importData(file)
            .then(() => {
                loadData();
                alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
                console.log('‚úÖ –î–∞–Ω—ñ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ');
            })
            .catch(error => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
                alert('–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É: ' + error.message);
            });
    };
    
    input.click();
}

// === –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ù–Ü ===
window.loadData = loadData;
window.openProjectModal = openProjectModal;
window.saveProject = saveProject;
window.editProject = editProject;
window.deleteProject = deleteProject;
window.openClientsModal = openClientsModal;
window.addClient = addClient;
window.deleteClient = deleteClient;
window.openBasesModal = openBasesModal;
window.addBase = addBase;
window.deleteBase = deleteBase;
window.closeModal = closeModal;
window.applyFilters = applyFilters;
window.resetFilters = resetFilters;
window.exportData = exportData;
window.createSampleData = createSampleData;
window.clearAllData = clearAllData;
window.importData = importData;

// === –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ===
const app = new App();

// –ó–∞–ø—É—Å–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    app.init();
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
window.app = app;